---
import GitHub from "./icons/GitHub.astro";
import NextJS from "./icons/NextJS.astro";
import Tailwind from "./icons/Tailwind.astro";
import SqlServer from "./icons/SqlServer.astro";
import React from "./icons/React.astro";
import Php from "./icons/Php.astro";
import Spring from "./icons/Spring.astro";
import Angular from "./icons/Angular.astro";
import Java from "./icons/Java.astro";
import Nodejs from "./icons/NodeJS.astro";
import Express from "./icons/Express.astro";
import AstroDev from "./icons/Astro5.astro";
import Flowbite from "./icons/Flowbite.astro";
import Bootstrap from "./icons/Bootstrap.astro";
import Django from "./icons/Django.astro";
import JavaScript from "./icons/JavaScript.astro";
import Docker from "./icons/Docker.astro";
import TypeScript from "./icons/TypeScript.astro";
import MongoDB from "./icons/MongoDB.astro";
import Kubernetes from "./icons/Kubernetes.astro";
import Csharp from "./icons/Csharp.astro";
import Link from "./icons/Link.astro";
import LinkButton from "./LinkButton.astro";

// iconos = https://svgl.app/?search=spring

const TAGS = {
  CSHARP: {
    name: "C#",
    class: "bg-[#003159] text-white",
    icon: Csharp,
  },
  KUBERNETES: {
    name: "Kubernetes",
    class: "bg-[#003159] text-white",
    icon: Kubernetes,
  },
  MONGODB: {
    name: "MongoDB",
    class: "bg-[#003159] text-white",
    icon: MongoDB,
  },
  TYPESCRIPT: {
    name: "TypeScript",
    class: "bg-[#003159] text-white",
    icon: TypeScript,
  },
  DOCKER: {
    name: "Docker",
    class: "bg-[#003159] text-white",
    icon: Docker,
  },
  JAVASCRIPT: {
    name: "JavaScript",
    class: "bg-[#003159] text-white",
    icon: JavaScript,
  },
  DJANGO: {
    name: "Django",
    class: "bg-[#003159] text-white",
    icon: Django,
  },
  BOOTSTRAP: {
    name: "Bootstrap",
    class: "bg-[#003159] text-white",
    icon: Bootstrap,
  },
  FLOWBITE: {
    name: "Flowbite",
    class: "bg-[#003159] text-white",
    icon: Flowbite,
  },
  ASTRODEV: {
    name: "AstroDev",
    class: "bg-[#003159] text-white",
    icon: AstroDev,
  },
  EXPRESS: {
    name: "Express",
    class: "bg-[#003159] text-white",
    icon: Express,
  },
  NODEJS: {
    name: "Nodejs",
    class: "bg-[#003159] text-white",
    icon: Nodejs,
  },
  NEXT: {
    name: "Next.js",
    class: "bg-[#003159] text-white",
    icon: NextJS,
  },
  TAILWIND: {
    name: "Tailwind CSS",
    class: "bg-[#003159] text-white",
    icon: Tailwind,
  },
  REACT: {
    name: "React",
    class: "bg-[#003159] text-white",
    icon: React,
  },
  SQLSERVER: {
    name: "SqlServer",
    class: "bg-[#003159] text-white",
    icon: SqlServer,
  },
  PHP: {
    name: "Php",
    class: "bg-[#003159] text-white",
    icon: Php,
  },
  JAVA: {
    name: "Java",
    class: "bg-[#003159] text-white",
    icon: Java,
  },
  SPRING: {
    name: "Spring",
    class: "bg-[#003159] text-white",
    icon: Spring,
  },
  ANGULAR: {
    name: "Angular",
    class: "bg-[#003159] text-white",
    icon: Angular,
  },
};
const FEATURED_PROJECTS = [
  {
    title: "Aplicacion Web y Movil - WIRIN",
    modalidad: "Grupal",
    description:
      "Aplicación pensada para estudiantes con discapacidad visual, que ofrece un servicio para gestionar la digitalización de textos académicos. Realizada por un equipo de 7 desarrolladores de software utilizando Git y SCRUM como metodología ágil, y .Net y Angular para el Backend/Frontend. Mi participación fue como desarrollador fullstack, encargado de construir vistas en el frontend junto a sus servicios y tests, además de desarrollar funcionalidades en el backend que daban soporte a esas interfaces.",
    landingPage: "https://wirinadapta.com.ar/",
    frontend: "https://github.com/lucasdbarrios/WIRIN-FrontEnd",
    backend: "https://github.com/thomasloader1/wirin-api",
    image: "/img/wirin.png",
    tags: [TAGS.ANGULAR, TAGS.CSHARP, TAGS.TYPESCRIPT],
  },
  {
    title: "Pagina web - Pasteleria",
    modalidad: "Individual",
    description:
      "Desarrollé una página web personalizada para una pastelería utilizando React y Flowbite. La plataforma incluye un catálogo de productos atractivo y funcional, donde los usuarios pueden explorar una amplia variedad de productos de pastelería con imágenes de alta calidad y descripciones detalladas. Además, la página está optimizada para ser completamente responsive.",
    link: "https://pasteleria-belen.vercel.app/",
    github: "https://github.com/mag0/PasteleriaBelen",
    image: "/img/belicias.png",
    tags: [TAGS.REACT, TAGS.TAILWIND, TAGS.FLOWBITE, TAGS.JAVASCRIPT],
  },
  {
    title: "Gestion de flota vehicular",
    modalidad: "Grupal",
    description:
      "Desarrollé una aplicación web de gestión de flotas utilizando Spring y SQL Server. Cada usuario puede gestionar su propia flota de vehículos, tomar pedidos y asignarlos a los vehículos a través de la web. La aplicación también incluye un mapa en tiempo real que muestra los viajes de los vehículos.",
    github: "https://github.com/mag0/ProyectoTallerWeb",
    image: "/img/gestionVehicular.jpg",
    tags: [TAGS.JAVA, TAGS.SPRING, TAGS.SQLSERVER, TAGS.BOOTSTRAP],
  },
];

const OTHER_PROJECTS = [
  {
    title: "WeatherWeb",
    modalidad: "Individual",
    description:
      "Desarrollé una aplicación meteorológica utilizando React para el frontend y la API de Visual Crossing para obtener información del clima. La aplicación permite buscar el clima en tiempo real de cualquier ciudad, mostrando detalles como la temperatura, la descripción del clima, la presión y la humedad. Implementé un diseño moderno y funcional utilizando Tailwind CSS y Flowbite, creando una experiencia de usuario intuitiva. Los datos se recuperan dinámicamente desde la API, asegurando que la información sea precisa y actualizada en múltiples idiomas, dependiendo del idioma seleccionado por el usuario.",
    link: "https://weather-web-alpha-liard.vercel.app/",
    github: "https://github.com/mag0/WeatherWeb",
    image: "/img/weatherWeb.png",
    tags: [TAGS.REACT, TAGS.TAILWIND, TAGS.FLOWBITE, TAGS.JAVASCRIPT],
  },
  {
    title: "MovieMania",
    modalidad: "Individual",
    description:
      "Desarrollé una aplicación de películas utilizando React para el frontend y la API de TMDB para obtener la información de las películas. La aplicación muestra una lista detallada de películas, con sus títulos, imágenes y descripciones. Utilicé Tailwind y Flowbite para diseñar una interfaz de usuario moderna y visualmente atractiva. Los datos se obtuvieron dinámicamente desde la API de TMDB, garantizando información actualizada y precisa.",
    link: "https://movie-mania-navy.vercel.app/",
    github: "https://github.com/mag0/MovieMania",
    image: "/img/moviemania.png",
    tags: [TAGS.REACT, TAGS.TAILWIND, TAGS.FLOWBITE, TAGS.JAVASCRIPT],
  },
  {
    title: "Preguntados",
    modalidad: "Grupal",
    description:
      "Desarrollé una aplicación web tipo Preguntados utilizando PHP y SQL. Los usuarios pueden iniciar partidas, responder preguntas y guardar su puntaje. La aplicación permite recomendar preguntas, que son revisadas por un usuario con rol de editor. Además, un usuario con rol de administrador puede visualizar todas las estadísticas de los jugadores en gráficos temporales.",
    github: "https://github.com/mag0/ProyectoFinalWeb2",
    image: "/img/preguntados.jpg",
    tags: [TAGS.PHP, TAGS.SQLSERVER, TAGS.BOOTSTRAP],
  },
  {
    title: "Aplicacion de lista de tareas",
    modalidad: "Grupal",
    description:
      "Desarrollé una aplicación web de gestión de tareas utilizando Angular para el frontend y una API RESTful creada con Node.js y Express en el backend. La aplicación permite a los usuarios crear, leer, actualizar y eliminar tareas, las cuales se almacenan en memoria en el backend. Los usuarios pueden gestionar sus listas de tareas de manera intuitiva y eficiente a través de una interfaz web interactiva.",
    github: "https://github.com/mag0/TPTallerWeb2",
    image: "/img/webTareas.jpg",
    tags: [
      TAGS.ANGULAR,
      TAGS.NODEJS,
      TAGS.EXPRESS,
      TAGS.FLOWBITE,
      TAGS.TYPESCRIPT,
    ],
  },
  {
    title: "Consesionarios de Estados Unidos",
    modalidad: "Individual",
    description:
      "Desarrollé una aplicación web utilizando JavaScript y React.js para el frontend, y Python, Node.js y Express para el backend. La aplicación muestra una lista detallada de elementos, con sus nombres, imágenes y descripciones. Obtuve los datos dinámicamente desde una API personalizada, garantizando información actualizada y precisa. Utilicé principios de DevOps para la integración y entrega continua, asegurando un desarrollo eficiente y sin interrupciones. Finalmente, desplegué la aplicación en la nube utilizando contenedores y tecnologías sin servidor, lo que permite una escalabilidad y accesibilidad óptimas.",
    github: "https://github.com/mag0/Dealer_project",
    image: "/img/concesionarios.png",
    tags: [TAGS.DJANGO, TAGS.JAVASCRIPT, TAGS.REACT, TAGS.DOCKER, TAGS.EXPRESS],
  },
];
---

<section class="mb-16">
  <h2 class="text-3xl font-bold mb-8 text-gray-800 dark:text-gray-100">
    Proyectos Destacados
  </h2>
  <div class="flex flex-col gap-y-16">
    {
      FEATURED_PROJECTS.map(
        ({
          image,
          title,
          modalidad,
          description,
          tags,
          link,
          landingPage,
          github,
          frontend,
          backend,
        }) => (
          <article class="flex flex-col space-x-0 space-y-8 group md:flex-row md:space-x-8 md:space-y-0">
            <div class="w-full md:w-1/2">
              <div class="relative flex flex-col items-center col-span-6 row-span-5 gap-8 shadow-xl overflow-hidden rounded-xl sm:rounded-xl lg:border lg:border-gray-800">
                <img
                  alt={title}
                  class="object-cover object-center w-full h-full"
                  loading="lazy"
                  src={image}
                />
              </div>
            </div>
            <div class="w-full md:w-1/2 md:max-w-lg">
              <h3 class="text-2xl font-bold text-gray-800 dark:text-gray-100">
                {title}
              </h3>
              <h4 style="color: rgb(246, 113, 113);">Desarrollo {modalidad}</h4>
              <div class="flex flex-wrap mt-2">
                <ul class="flex flex-row flex-wrap mb-2 gap-x-2">
                  {tags.map((tag) => (
                    <li>
                      <span
                        class={`flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2 `}
                      >
                        <tag.icon class="size-4" />
                        {tag.name}
                      </span>
                    </li>
                  ))}
                </ul>
                <div class="mt-2 text-gray-700 dark:text-gray-400">
                  {description}
                </div>
                <footer class="flex items-end justify-start mt-4 gap-x-4">
                  {frontend && (
                    <LinkButton href={frontend}>
                      <GitHub class="size-6" />
                      Frontend
                    </LinkButton>
                  )}
                  {backend && (
                    <LinkButton href={backend}>
                      <GitHub class="size-6" />
                      Backend
                    </LinkButton>
                  )}
                  {github && (
                    <LinkButton href={github}>
                      <GitHub class="size-6" />
                      Github
                    </LinkButton>
                  )}
                  {landingPage && (
                    <LinkButton href={landingPage}>
                      <Link class="size-4" />
                      Landing
                    </LinkButton>
                  )}
                </footer>
              </div>
            </div>
          </article>
        )
      )
    }
  </div>
</section>

<!-- Sección de todos los demás proyectos -->
<section>
  <h2 class="text-3xl font-bold mb-8 text-gray-800 dark:text-gray-100">
    Otros proyectos
  </h2>
  <div class="flex flex-col gap-y-16">
    {
      OTHER_PROJECTS.map(
        ({ image, title, modalidad, description, tags, link, github }) => (
          <article class="flex flex-col space-x-0 space-y-8 group md:flex-row md:space-x-8 md:space-y-0">
            <div class="w-full md:w-1/2">
              <div class="relative flex flex-col items-center col-span-6 row-span-5 gap-8 shadow-xl overflow-hidden rounded-xl sm:rounded-xl lg:border lg:border-gray-800">
                <img
                  alt={title}
                  class="object-cover object-center w-full h-full"
                  loading="lazy"
                  src={image}
                />
              </div>
            </div>
            <div class="w-full md:w-1/2 md:max-w-lg">
              <h3 class="text-2xl font-bold text-gray-800 dark:text-gray-100">
                {title}
              </h3>
              <h4 style="color: rgb(246, 113, 113);">Desarrollo {modalidad}</h4>
              <div class="flex flex-wrap mt-2">
                <ul class="flex flex-row flex-wrap mb-2 gap-x-2">
                  {tags.map((tag) => (
                    <li>
                      <span
                        class={`flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2 `}
                      >
                        <tag.icon class="size-4" />
                        {tag.name}
                      </span>
                    </li>
                  ))}
                </ul>
                <div class="mt-2 text-gray-700 dark:text-gray-400">
                  {description}
                </div>
                <footer class="flex items-end justify-start mt-4 gap-x-4">
                  {github && (
                    <LinkButton href={github}>
                      <GitHub class="size-6" />
                      Github
                    </LinkButton>
                  )}
                  {link && (
                    <LinkButton href={link}>
                      <Link class="size-4" />
                      Web
                    </LinkButton>
                  )}
                </footer>
              </div>
            </div>
          </article>
        )
      )
    }
  </div>
</section>
